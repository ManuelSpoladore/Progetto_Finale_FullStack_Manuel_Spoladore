caricare backend su hostinger
aggiungere loader post contatti
provare a vedere se il tutto funziona


Sto provando a registrarmi su scuolaribelle, ma la console mi d√† questo errore: index-CMD5XAlg.js:77 üéØ Chiamata a: https://scuolaribelle.fun/backend/api/api/universities.php
register:1 Access to XMLHttpRequest at 'https://scuolaribelle.fun/backend/api/api/universities.php' from origin 'https://scuolaribelle.netlify.app' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
index-CMD5XAlg.js:77 ‚ùå Errore caricamento universit√†: fe
(anonymous) @ index-CMD5XAlg.js:77
scuolaribelle.fun/backend/api/api/universities.php:1  Failed to load resource: net::ERR_FAILED

I file di registrazione sono: authcontroller: 

<?php
require_once __DIR__ . '/../config/database.php';

class AuthController {
    public static function register() {
        $input = json_decode(file_get_contents('php://input'), true);

        $name = $input['name'] ?? '';
        $surname = $input['surname'] ?? '';
        $username = $input['username'] ?? '';
        $mail = $input['mail'] ?? '';
        $password = $input['password'] ?? '';
        $university = $input['university_id'] ?? '';
        $faculty = $input['faculty_id'] ?? '';

        if (empty($name) || empty($surname) || empty($username) || empty($mail) || empty($password) || empty($university) || empty($faculty)) {
            echo json_encode(['success' => false, 'message' => 'Tutti i campi sono obbligatori']);
            return;
        }

        if (!filter_var($mail, FILTER_VALIDATE_EMAIL)) {
            echo json_encode(['success' => false, 'message' => 'Indirizzo mail non valido']);
            return;
        }

        global $conn;

        // Controlla email
        $stmt = $conn->prepare("SELECT id FROM users WHERE mail = ?");
        if (!$stmt) {
            echo json_encode(['success' => false, 'message' => 'Errore nella query email']);
            return;
        }
        $stmt->bind_param("s", $mail);
        $stmt->execute();
        $stmt->store_result();
        if ($stmt->num_rows > 0) {
            echo json_encode(['success' => false, 'message' => 'Email gi√† registrata']);
            return;
        }
        $stmt->close();

        // Controlla username
        $stmt = $conn->prepare("SELECT id FROM users WHERE username = ?");
        if (!$stmt) {
            echo json_encode(['success' => false, 'message' => 'Errore nella query username']);
            return;
        }
        $stmt->bind_param("s", $username);
        $stmt->execute();
        $stmt->store_result();
        if ($stmt->num_rows > 0) {
            echo json_encode(['success' => false, 'message' => 'Username gi√† registrato']);
            return;
        }
        $stmt->close();

        $hashed_password = password_hash($password, PASSWORD_DEFAULT);

        $stmt = $conn->prepare("INSERT INTO users (name, surname, username, mail, password, university_id, faculty_id) VALUES (?, ?, ?, ?, ?, ?, ?)");
        if (!$stmt) {
            echo json_encode(['success' => false, 'message' => 'Errore nella query insert']);
            return;
        }

        $stmt->bind_param("sssssss", $name, $surname, $username, $mail, $hashed_password, $university, $faculty);

        if ($stmt->execute()) {
            echo json_encode(['success' => true, 'message' => 'Registrazione completata']);
        } else {
            echo json_encode(['success' => false, 'message' => 'Errore durante la registrazione']);
        }

        $stmt->close();
        $conn->close();
    }

    public function login()
    {
        header("Access-Control-Allow-Origin: https://scuolaribelle.netlify.app");
        header("Access-Control-Allow-Headers: Content-Type, Authorization");
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
        header("Content-Type: application/json");

        if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
            http_response_code(200);
            exit;
        }

        global $conn; 

        $input = json_decode(file_get_contents('php://input'), true);

        $username = $input['username'] ?? '';
        $password = $input['password'] ?? '';

        if (empty($username) || empty($password)) {
            echo json_encode(['success' => false, 'message' => 'Inserisci username e password']);
            return;
        }

        $stmt = $conn->prepare("
            SELECT u.id, u.username, u.password,
                   u.university_id, u.faculty_id,
                   un.name AS university,
                   f.name AS faculty
            FROM users u
            JOIN universities un ON u.university_id = un.id
            JOIN faculties f ON u.faculty_id = f.id
            WHERE u.username = ?
        ");
        if (!$stmt) {
            echo json_encode(['success' => false, 'message' => 'Errore SQL: ' . $conn->error]);
            return;
        }

        $stmt->bind_param("s", $username);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows === 0) {
            echo json_encode(['success' => false, 'message' => 'Utente non trovato']);
            return;
        }

        $user = $result->fetch_assoc();

        if (password_verify($password, $user['password'])) {
            $key = $_ENV['JWT_SECRET'];
            $payload = [
                "user_id" => $user['id'],
                "username" => $username,
                "university" => $user['university'],
                "faculty" => $user['faculty'],
                "university_id" => $user['university_id'],
                "faculty_id" => $user['faculty_id'],
                "exp" => time() + 3600
            ];
            $jwt = JWT::encode($payload, $key, 'HS256');

            echo json_encode([
                'success' => true,
                'token' => $jwt,
                'message' => 'Login riuscito'
            ]);
        } else {
            echo json_encode(['success' => false, 'message' => 'Password errata']);
        }

        $stmt->close();
        $conn->close();
    }

   
}


register.jsx:

import React from "react";
import { useState, useEffect } from "react";
import axios from "axios";
import PageWrapper from "../../utils/PageWrapper";
import { useNavigate } from "react-router-dom";

export default function RegisterForm() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: "",
    surname: "",
    username: "",
    mail: "",
    password: "",
    university_id: "",
    faculty_id: "",
  });
  const [message, setMessage] = useState("");
  const [universities, setUniversities] = useState([]);
  const [faculties, setFaculties] = useState([]);

  // useEffect(() => {
  //   axios.get(`${import.meta.env.VITE_BACKEND_URL}/get-universities.php`).then((res) => {
  //     setUniversities(res.data);
  //   });
  // }, []);

  useEffect(() => {
  const url = `${import.meta.env.VITE_BACKEND_URL}/api/universities.php`;
  console.log("üéØ Chiamata a:", url);

  axios
    .get(url)
    .then((res) => {
      console.log("üì¶ Universit√† ricevute:", res.data);
      setUniversities(res.data);
    })
    .catch((err) => {
      console.error("‚ùå Errore caricamento universit√†:", err);
    });
}, []);


  useEffect(() => {
    if (formData.university_id) {
      axios
        .get(`${import.meta.env.VITE_BACKEND_URL}/api/faculties?university_id=${formData.university_id}`)
        .then((res) => setFaculties(res.data));
    } else {
      setFaculties([]);
    }
  }, [formData.university_id]);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/api/register`, formData);
      if (response.data.success) {
        setMessage("Registrazione completata! Verrai reindirizzato al Login");
        const timer = setTimeout(() => {
          navigate("/login");
        }, 3300);

        return () => clearTimeout(timer);
      } else {
        setMessage(response.data.message || "Errore nella registrazione");
      }
    } catch (error) {
      setMessage("Errore di connesione col server");
      console.error(error);
    }
  };

  return (
    <PageWrapper>
      <div className="min-h-screen bg-red-50 flex items-center justify-center p-4">
        <div className="bg-white p-8 rounded shadow-md w-full max-w-lg">
          <div className="text-3xl font-bold mb-6 text-center">Registrati</div>

          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            {/* Nome  */}
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1">
                <label htmlFor="fname" className="block mb-1 font-bold">
                  Nome
                </label>
                <input
                  type="text"
                  name="name"
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="Nome"
                  value={formData.name}
                  onChange={handleChange}
                  required
                />
              </div>
              {/* Cognome  */}
              <div className="flex-1">
                <label htmlFor="sname" className="block mb-1 font-bold">
                  Cognome
                </label>
                <input
                  type="text"
                  name="surname"
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="Cognome"
                  value={formData.surname}
                  onChange={handleChange}
                  required
                />
              </div>
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="block mb-1 font-bold">
                Email
              </label>
              <input
                type="email"
                name="mail"
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="Email"
                value={formData.mail}
                onChange={handleChange}
                required
              />
            </div>

            {/* Password */}
            <div>
              <label htmlFor="username" className="block mb-1 font-bold">
                Password
              </label>
              <input
                type="password"
                name="password"
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="Password"
                value={formData.password}
                onChange={handleChange}
                required
              />
            </div>
            {/* Nome Utente */}
            <div>
              <label htmlFor="username" className="block mb-1 font-bold">
                Nome Utente
              </label>
              <input
                type="text"
                name="username"
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="Scegline uno per rimanere anonimo"
                value={formData.username}
                onChange={handleChange}
                required
              />
            </div>
            {/* Universit√† */}
            <div>
              <label htmlFor="university" className="block mb-1 font-bold">
                Universit√†
              </label>
              <select
                name="university_id"
                className="w-full p-2 border border-gray-300 rounded text-black "
                value={formData.university_id}
                onChange={handleChange}
                required
              >
                <option value="">Seleziona Universit√†</option>
                {universities.map((u) => {
                  return (
                    <option key={u.id} value={u.id}>
                      {u.name}
                    </option>
                  );
                })}
              </select>
            </div>

            {/* Facolt√† */}
            <div>
              <label htmlFor="faculty" className="block mb-1 font-bold">
                Facolt√†
              </label>
              <select
                name="faculty_id"
                className="w-full p-2 border border-gray-300 rounded text-black "
                value={formData.faculty_id}
                onChange={handleChange}
                disabled={!faculties.length}
              >
                <option value="">Seleziona Facolt√†</option>
                {faculties.map((f) => {
                  return (
                    <option key={f.id} value={f.id}>
                      {f.name}
                    </option>
                  );
                })}
              </select>
            </div>
            {message && (
              <div className="text-center text-red-700 font-bold">
                {message}
              </div>
            )}
            {/* Button */}
            <div className="pt-2 flex justify-center">
              <button
                type="submit"
                className="w-full lg:w-auto px-4 py-2 bg-red-500 text-white font-bold rounded hover:bg-black hover:text-white transition hover:duration-700 hover:cursor-pointer"
              >
                Iscriviti
              </button>
            </div>
          </form>
        </div>
      </div>
    </PageWrapper>
  );
}


Se ti servono altri file dimmi: